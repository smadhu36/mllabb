import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC

iris = load_iris()
X = iris.data[:, :2]
y = iris.target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

clf = SVC(kernel='linear', random_state=42)
clf.fit(X_train, y_train)

xx, yy = np.meshgrid(np.linspace(X[:, 0].min() - 1, X[:, 0].max() + 1, 100),
                     np.linspace(X[:, 1].min() - 1, X[:, 1].max() + 1, 100))
Z = clf.decision_function(np.c_[xx.ravel(), yy.ravel()])
Z = np.argmax(Z.reshape(-1, 3), axis=1)
Z = Z.reshape(xx.shape)
plt.figure(figsize=(10, 6))
colors=['blue','red','green']
for i in range(3):
    plt.scatter(X[y == i][:, 0], X[y == i][:, 1], color=colors[i], label=iris.target_names[i], edgecolor='k')

plt.contour(xx, yy, Z, levels=[0, 1, 2], colors='black', linewidths=1)
plt.xlabel(iris.feature_names[0])
plt.ylabel(iris.feature_names[1])
plt.title("Iris Dataset: Linear SVM Decision Boundary with Three Species")
plt.legend()
plt.grid()
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
iris = load_iris()
X = iris.data[:, :2]
y = iris.target

mask = y < 2
X_filtered = X[mask]
y_filtered = y[mask]

X_train, X_test, y_train, y_test = train_test_split(X_filtered, y_filtered, test_size=0.3, random_state=42)

clf = SVC(kernel='linear', random_state=42)
clf.fit(X_train, y_train)

xx, yy = np.meshgrid(np.linspace(X_filtered[:, 0].min() - 1, X_filtered[:, 0].max() + 1, 100),
                     np.linspace(X_filtered[:, 1].min() - 1, X_filtered[:, 1].max() + 1, 100))
Z = clf.decision_function(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)

plt.figure(figsize=(8, 6))
plt.scatter(X_filtered[y_filtered == 0][:, 0], X_filtered[y_filtered == 0][:, 1], color='blue', label='Iris-setosa')
plt.scatter(X_filtered[y_filtered == 1][:, 0], X_filtered[y_filtered == 1][:, 1], color='red', label='Iris-versicolor')


plt.contour(xx, yy, Z, levels=[0], linewidths=2, colors='black')

plt.xlabel(iris.feature_names[0])
plt.ylabel(iris.feature_names[1])
plt.title("Iris Dataset: Linear SVM Decision Boundary")
plt.legend()
plt.grid()
plt.show()
